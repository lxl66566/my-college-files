#import "./template.typ": *
#import "@preview/tablex:0.0.9": tablex, colspanx, rowspanx
#import "@preview/tablem:0.1.0": tablem


#show: project.with(
  title: "",
  authors: ("absolutex",),
)

#title("实验一：Linux 基础操作与 gvim 编辑器学习")


= 实验目的

本实验旨在让学生初步掌握Linux操作系统和gvim编辑器的基本使用，为后续更深入的Linux学习打下基础。通过远程连接和实际操作，学生可以：

- 了解Linux系统结构: 熟悉文件系统、目录结构、用户权限等概念。
- 掌握常用命令: 熟练使用ls、cd、cp、mv、rm等命令进行文件和目录管理，cat、more、less等命令查看文件内容，chmod、chown等命令修改文件权限。
- 提高文本编辑效率: 学习gvim编辑器的基本操作，快速编辑、查找、替换文本。

实验内容:

1. 远程连接: 使用VNC客户端连接到远程Linux服务器，体验图形化界面下的远程操作。
2. 基本命令: 进行一系列文件和目录操作，熟悉Linux命令行的使用方法。
3. gvim编辑器: 使用gvim编辑器创建一个或修改一个配置文件，了解其基本功能。

#figure(
  image("assets/1/1.png", width: 60%),
  caption: [Linux 基础操作],
)

#figure(
  image("assets/1/2.png", width: 60%),
  caption: [gvim 基础操作],
)

本次实验让我认识到Linux系统是一套功能强大、灵活的系统，掌握Linux的基本操作对于计算机专业的学生来说是非常重要的。同时，gvim编辑器作为一款功能强大的文本编辑器，在Linux环境下有着广泛的应用。通过这次实验，我不仅掌握了Linux和gvim的基本操作，而且培养了独立思考、解决问题的能力。

#title("实验二：自动售卖机功能实现与仿真")

= 实验目的

- 掌握Verilog HDL： 通过设计一个自动售货机，深入理解Verilog硬件描述语言，掌握其语法和应用。
- 熟悉Linux开发环境： 在Linux系统下进行Verilog代码的编写、编译、仿真和波形分析，熟悉整个开发流程。
- 验证设计： 利用VCS工具对设计的自动售货机进行仿真，并通过DVE工具观察仿真波形，验证设计的正确性。

= 实验内容

== 代码编写

- 核心逻辑： 编写 machine.v 文件，实现自动售货机的核心功能，包括：
  - 商品选择： 通过输入信号选择不同的商品。
  - 付款处理： 判断输入的付款金额是否足够，并更新状态。
  - 找零逻辑： 计算并输出应找回的零钱。
- 测试激励： 编写 machine_tb.v 文件，设计测试用例，对自动售货机的各个功能进行验证。

== 仿真与波形分析

- 编译仿真： 在Linux环境下，使用VCS工具对编写的Verilog代码进行编译和仿真。
- 波形观察： 查看仿真产生的波形，观察商品选择信号、付款信号、找零信号等随时间的变化情况，从而验证设计的正确性。

= 实验结果

由于我在本机编写 verilog 代码，而 VNC 不支持粘贴选项，因此我使用本机的 iverilog 编译器与 vscode 插件 WaveTrace 进行仿真波形查看。

编译命令：

```sh
iverilog machine.v machine_tb.v -o out
./out
```

然后就能生成 vcd 文件，拖到 WaveTrace 中查看波形了。下面是模块代码：

#include_code("assets/2/machine.v")
#include_code("assets/2/machine_tb.v")

#figure(
  image("assets/2/1.png", width: 60%),
  caption: [输出波形],
)

可以看出波形符合预期，饮料发放与找零功能正常。

= 实验心得

通过本次实验，我不仅加深了对Verilog硬件描述语言的理解，而且在实践中掌握了其基本语法和应用技巧。编写自动售货机的核心逻辑需要将实际问题抽象为数字电路模型，这促使我思考如何用有限状态机（FSM）等概念来表达复杂的业务逻辑。在这个过程中，我学会了如何定义模块、端口、内部信号以及使用条件语句和循环结构来实现预期功能。

#title("实验三：自动售卖机综合电路生成")

= 实验目的

1. 学习使用Design Vision工具进行数字电路综合的方法。 掌握如何将Verilog HDL描述的数字电路转化为实际的硬件电路。
2. 通过综合分析，理解Verilog设计与硬件实现之间的对应关系。 深入了解数字电路设计与硬件实现的映射关系，为后续的数字电路设计打下基础。
3. 掌握数字电路设计与器件实现之间的相互关系。 了解不同设计方案对器件资源利用率的影响，为选择合适的器件提供依据。

= 实验内容

1. 设计文件准备： 将描述自动售卖机功能的Verilog文件（auto_sell_machine.v）导入Design Vision工具，作为综合分析的起点。
2. 电路综合：
  - 选择工艺库： 根据设计的具体要求，选择合适的工艺库，确定电路综合的目标工艺节点。
  - 进行综合： 使用Design Vision工具对设计进行综合，生成综合后的电路结构。
3. 综合结果分析：
  - 查看电路图： 详细分析综合生成的电路图，了解各功能模块（如商品选择、付款处理、找零）的硬件实现方式，以及它们之间的连接关系。
  - 检查综合日志： 仔细检查综合过程产生的日志，确保设计没有错误或警告，并分析综合的效率和资源利用情况。

= 实验结果

这次实验就不得不在 VNC 里做了，因为我本机没有 Design Vision。所以我想办法把我的代码传到了服务器里。

然后，通过 design_vision -topo 指令启动 design_vision GUI
界面，read_verilog machine.v 导入模块，然后右击，点击 schematic view 查看模块电路图。双击放大可以查看门级网表。

#figure(
  image("assets/3/1.png", width: 60%),
  caption: [编译完成],
)
#figure(
  image("assets/3/2.png", width: 60%),
  caption: [schematic],
)
#figure(
  image("assets/3/3.png", width: 70%),
  caption: [门级网表],
)
#figure(
  image("assets/3/4.png", width: 50%),
  caption: [面积报告],
)

= 心得体会

通过本次实验，我深入了解了数字电路综合的过程，掌握了使用Design Vision工具进行电路综合的方法。同时，通过对综合结果的分析，加深了对Verilog HDL描述的数字电路与实际硬件实现之间对应关系的理解。


#title("实验四：反相器模拟版图设计")

= 实验目的：

1. 学习使用 Virtuoso 工具进行电路设计的基本流程。
2. 掌握导入 SMIC180 工艺库的方法，熟悉其电路设计规则。
3. 搭建并验证反相器 (INV) 电路图，理解其基本逻辑功能和硬件实现。

= 实验内容

1. 工具与工艺库导入：
  - 在 Linux 环境下启动 Cadence Virtuoso。
  - 将 SMIC180 工艺库正确加载到设计环境中，确保设计规则符合工艺要求。
2. 电路搭建：
  - 使用 Virtuoso Schematic Editor，完成反相器 (INV) 电路的搭建：
    - 放置 PMOS 和 NMOS 晶体管，设置其尺寸比例 (W/L)。
    - 添加电源 (VDD) 和接地 (GND) 节点，以及输入和输出端口。
    - 确保电路连接完整无误。
3. 电路验证：
  - 执行设计规则检查 (DRC)，验证电路图是否符合工艺设计规范。
  - 准备仿真文件，为后续性能验证做好准备。

= 实验结果

#figure(
  image("assets/4/1.png", width: 50%),
  caption: [schematic + 版图布局],
)
#figure(
  image("assets/4/2.png", width: 40%),
  caption: [symbol],
)

= 心得体会

通过本次实验，我掌握了使用Cadence Virtuoso进行电路设计的基本流程利用Schematic Editor完成了反相器（INV）电路的搭建，包括放置PMOS与NMOS晶体管、设置尺寸比例(W/L)、添加电源(VDD)和接地(GND)节点以及输入输出端口。经过设计规则检查(DRC)，验证了电路图合规，并准备了仿真文件以评估性能。最终，不仅加深了对反相器逻辑功能的理解，还获得了实际操作经验，为后续复杂电路设计打下了坚实的基础。


#title("实验五：认识数字后端设计")

物理设计是集成电路设计流程中的重要环节，其目标是将逻辑电路图转换为实际的芯片版图。布局是物理设计的第一步，其质量直接影响后续布线、时序和功耗等性能指标。本实验将使用 Cadence Innovus 工具，学习标准单元布局的基本流程，并进行初步优化。

= 实验目的

- 熟悉 Cadence Innovus 物理设计环境的使用。
- 掌握网表和约束文件的导入方法。
- 理解标准单元布局的概念和流程。
- 掌握自动布局和手动优化的方法。
- 了解布局对时序、功耗和面积的影响。

= 实验步骤

1. 准备工作：
  - 在 Linux 环境下启动 Innovus 工具，加载相关脚本代码。
  - 导入电路设计的网表文件和约束条件 (constraints)，包括 I/O 管脚位置及设计规则约束 (DRC)。
2. 自动放置：
  - 使用 Innovus 中的自动放置功能，将多个逻辑单元按照设计约束和性能需求进行初步布局。
  - 检查放置结果，确保单元间无重叠，并满足基本的物理设计规则。
3. 优化与调整：
  - 根据电路需求，对自动放置的结果进行手动微调，确保关键单元的布局更符合性能优化要求，例如减少延迟和线长。

= 实验内容

首先在实验目录下输入 innovus 打开 GUI，再回到命令行，通过 source SCRIPTS/xxx 加载对应脚本。

#figure(
  image("assets/5/1.png", width: 70%),
  caption: [左上：init_design； 右上：floorplan； 左下：power_plan； 右下：place],
)

+ init_design：初始化设计，包括导入网表和工艺文件。
+ floorplan：初始化布局，进行平面规划，定义核心区域，输入输出引脚位置。
+ power_plan：电源规划，生成电源和地线网络，保证电路稳定。
+ place：完成标准单元布局，将电路模块按优化目标放置在设计区域中。

= 心得体会

这次实验让我首次接触到了数字电路的后端设计，通过使用Cadence Innovus工具，我对集成电路的设计流程有了更深入的了解。

实验开始时，我按照步骤在Linux环境下启动了Innovus工具，并加载了必要的脚本文件。导入网表和约束文件是整个流程的基础，这一步骤要求我们仔细检查文件路径和格式，确保无误。接着，通过自动放置功能，工具迅速生成了一个初步的布局方案。虽然自动布局大大节省了时间，但结果往往不够理想，需要我们进行手动优化。

在优化过程中，我深刻体会到了布局对电路性能的影响。例如，通过调整关键单元的位置，可以有效减少布线延迟，优化电路的时序性能。此外，电源规划也非常重要，良好的电源网络设计能够保证电路的稳定运行，减少功耗。

这次实验让我认识到，后端设计不仅仅是将逻辑电路转换为物理版图，更是一门兼顾艺术与技术的学问。它要求设计师在面积、功耗和性能之间找到最佳平衡点。虽然这次实验只是后端设计的冰山一角，但已经足够让我感受到其中的挑战与乐趣。
