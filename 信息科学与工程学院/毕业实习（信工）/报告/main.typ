#import "./template.typ": *
#import "@preview/tablex:0.0.9": tablex, colspanx, rowspanx
#import "@preview/tablem:0.1.0": tablem


#show: project.with(
  title: "",
  authors: ("absolutex",),
)

#title("实验一：Linux 基础操作与 gvim 编辑器学习")


= 实验目的

本实验旨在让学生初步掌握Linux操作系统和gvim编辑器的基本使用，为后续更深入的Linux学习打下基础。通过远程连接和实际操作，学生可以：

- 了解Linux系统结构: 熟悉文件系统、目录结构、用户权限等概念。
- 掌握常用命令: 熟练使用ls、cd、cp、mv、rm等命令进行文件和目录管理，cat、more、less等命令查看文件内容，chmod、chown等命令修改文件权限。
- 提高文本编辑效率: 学习gvim编辑器的基本操作，快速编辑、查找、替换文本。

实验内容:

1. 远程连接: 使用VNC客户端连接到远程Linux服务器，体验图形化界面下的远程操作。
2. 基本命令: 进行一系列文件和目录操作，熟悉Linux命令行的使用方法。
3. gvim编辑器: 使用gvim编辑器创建一个或修改一个配置文件，了解其基本功能。

#figure(
  image("assets/1/1.png", width: 60%),
  caption: [Linux 基础操作],
)

#figure(
  image("assets/1/2.png", width: 55%),
  caption: [gvim 基础操作],
)

本次实验让我认识到Linux系统是一套功能强大、灵活的系统，掌握Linux的基本操作对于计算机专业的学生来说是非常重要的。同时，gvim编辑器作为一款功能强大的文本编辑器，在Linux环境下有着广泛的应用。通过这次实验，我不仅掌握了Linux和gvim的基本操作，而且培养了独立思考、解决问题的能力。

#title("实验二：自动售卖机功能实现与仿真")

= 实验目的

- 掌握Verilog HDL： 通过设计一个自动售货机，深入理解Verilog硬件描述语言，掌握其语法和应用。
- 熟悉Linux开发环境： 在Linux系统下进行Verilog代码的编写、编译、仿真和波形分析，熟悉整个开发流程。
- 验证设计： 利用VCS工具对设计的自动售货机进行仿真，并通过DVE工具观察仿真波形，验证设计的正确性。

= 实验内容

== 代码编写

- 核心逻辑： 编写 machine.v 文件，实现自动售货机的核心功能，包括：
  - 商品选择： 通过输入信号选择不同的商品。
  - 付款处理： 判断输入的付款金额是否足够，并更新状态。
  - 找零逻辑： 计算并输出应找回的零钱。
- 测试激励： 编写 machine_tb.v 文件，设计测试用例，对自动售货机的各个功能进行验证。

== 仿真与波形分析

- 编译仿真： 在Linux环境下，使用VCS工具对编写的Verilog代码进行编译和仿真。
- 波形观察： 查看仿真产生的波形，观察商品选择信号、付款信号、找零信号等随时间的变化情况，从而验证设计的正确性。

= 实验结果

由于我在本机编写 verilog 代码，而 VNC 不支持粘贴选项，因此我使用本机的 iverilog 编译器与 vscode 插件 WaveTrace 进行仿真波形查看。

编译命令：

```sh
iverilog machine.v machine_tb.v -o out
./out
```

然后就能生成 vcd 文件，拖到 WaveTrace 中查看波形了。下面是模块代码：

#include_code("assets/2/machine.v")
#include_code("assets/2/machine_tb.v")

#figure(
  image("assets/2/1.png", width: 60%),
  caption: [输出波形],
)

可以看出波形符合预期，饮料发放与找零功能正常。

= 实验心得

通过本次实验，我不仅加深了对Verilog硬件描述语言的理解，而且在实践中掌握了其基本语法和应用技巧。编写自动售货机的核心逻辑需要将实际问题抽象为数字电路模型，这促使我思考如何用有限状态机（FSM）等概念来表达复杂的业务逻辑。在这个过程中，我学会了如何定义模块、端口、内部信号以及使用条件语句和循环结构来实现预期功能。

#title("实验三：自动售卖机综合电路生成")

= 实验目的

1. 学习使用Design Vision工具进行数字电路综合的方法。 掌握如何将Verilog HDL描述的数字电路转化为实际的硬件电路。
2. 通过综合分析，理解Verilog设计与硬件实现之间的对应关系。 深入了解数字电路设计与硬件实现的映射关系，为后续的数字电路设计打下基础。
3. 掌握数字电路设计与器件实现之间的相互关系。 了解不同设计方案对器件资源利用率的影响，为选择合适的器件提供依据。

= 实验内容

1. 设计文件准备： 将描述自动售卖机功能的Verilog文件（auto_sell_machine.v）导入Design Vision工具，作为综合分析的起点。
2. 电路综合：
  - 选择工艺库： 根据设计的具体要求，选择合适的工艺库，确定电路综合的目标工艺节点。
  - 进行综合： 使用Design Vision工具对设计进行综合，生成综合后的电路结构。
3. 综合结果分析：
  - 查看电路图： 详细分析综合生成的电路图，了解各功能模块（如商品选择、付款处理、找零）的硬件实现方式，以及它们之间的连接关系。
  - 检查综合日志： 仔细检查综合过程产生的日志，确保设计没有错误或警告，并分析综合的效率和资源利用情况。

= 实验结果

这次实验就不得不在 VNC 里做了，因为我本机没有 Design Vision。所以我想办法把我的代码传到了服务器里。

然后，通过 design_vision -topo 指令启动 design_vision GUI
界面，read_verilog machine.v 导入模块，然后右击，点击 schematic view 查看模块电路图。双击放大可以查看门级网表。

#figure(
  image("assets/3/1.png", width: 60%),
  caption: [编译完成],
)
#figure(
  image("assets/3/2.png", width: 60%),
  caption: [schematic],
)
#figure(
  image("assets/3/3.png", width: 70%),
  caption: [门级网表],
)
#figure(
  image("assets/3/4.png", width: 50%),
  caption: [面积报告],
)

= 心得体会

通过本次实验，我深入了解了数字电路综合的过程，掌握了使用Design Vision工具进行电路综合的方法。同时，通过对综合结果的分析，加深了对Verilog HDL描述的数字电路与实际硬件实现之间对应关系的理解。


#title("实验四：反相器模拟版图设计")

= 实验目的：

1. 学习使用 Virtuoso 工具进行电路设计的基本流程。
2. 掌握导入 SMIC180 工艺库的方法，熟悉其电路设计规则。
3. 搭建并验证反相器 (INV) 电路图，理解其基本逻辑功能和硬件实现。

= 实验内容

1. 工具与工艺库导入：
  - 在 Linux 环境下启动 Cadence Virtuoso。
  - 将 SMIC180 工艺库正确加载到设计环境中，确保设计规则符合工艺要求。
2. 电路搭建：
  - 使用 Virtuoso Schematic Editor，完成反相器 (INV) 电路的搭建：
    - 放置 PMOS 和 NMOS 晶体管，设置其尺寸比例 (W/L)。
    - 添加电源 (VDD) 和接地 (GND) 节点，以及输入和输出端口。
    - 确保电路连接完整无误。
3. 电路验证：
  - 执行设计规则检查 (DRC)，验证电路图是否符合工艺设计规范。
  - 准备仿真文件，为后续性能验证做好准备。

= 实验结果

#figure(
  image("assets/4/1.png", width: 50%),
  caption: [schematic + layout],
)
#figure(
  image("assets/4/2.png", width: 25%),
  caption: [symbol],
)

= 心得体会

通过本次实验，我掌握了使用Cadence Virtuoso进行电路设计的基本流程利用Schematic Editor完成了反相器（INV）电路的搭建，包括放置PMOS与NMOS晶体管、设置尺寸比例(W/L)、添加电源(VDD)和接地(GND)节点以及输入输出端口。经过设计规则检查(DRC)，验证了电路图合规，并准备了仿真文件以评估性能。最终，不仅加深了对反相器逻辑功能的理解，还获得了实际操作经验，为后续复杂电路设计打下了坚实的基础。


#title("实验五：认识数字后端设计")

物理设计是集成电路设计流程中的重要环节，其目标是将逻辑电路图转换为实际的芯片版图。布局是物理设计的第一步，其质量直接影响后续布线、时序和功耗等性能指标。本实验将使用 Cadence Innovus 工具，学习标准单元布局的基本流程，并进行初步优化。

= 实验目的

- 熟悉 Cadence Innovus 物理设计环境的使用。
- 掌握网表和约束文件的导入方法。
- 理解标准单元布局的概念和流程。
- 掌握自动布局和手动优化的方法。
- 了解布局对时序、功耗和面积的影响。

= 实验步骤

1. 准备工作：
  - 在 Linux 环境下启动 Innovus 工具，加载相关脚本代码。
  - 导入电路设计的网表文件和约束条件 (constraints)，包括 I/O 管脚位置及设计规则约束 (DRC)。
2. 自动放置：
  - 使用 Innovus 中的自动放置功能，将多个逻辑单元按照设计约束和性能需求进行初步布局。
  - 检查放置结果，确保单元间无重叠，并满足基本的物理设计规则。
3. 优化与调整：
  - 根据电路需求，对自动放置的结果进行手动微调，确保关键单元的布局更符合性能优化要求，例如减少延迟和线长。

= 实验内容

首先在实验目录下输入 innovus 打开 GUI，再回到命令行，通过 source SCRIPTS/xxx 加载对应脚本。

#figure(
  image("assets/5/1.png", width: 70%),
  caption: [左上：init_design； 右上：floorplan； 左下：power_plan； 右下：place],
)

+ init_design：初始化设计，包括导入网表和工艺文件。
+ floorplan：初始化布局，进行平面规划，定义核心区域，输入输出引脚位置。
+ power_plan：电源规划，生成电源和地线网络，保证电路稳定。
+ place：完成标准单元布局，将电路模块按优化目标放置在设计区域中。

= 心得体会

这次实验让我首次接触到了数字电路的后端设计，通过使用Cadence Innovus工具，我对集成电路的设计流程有了更深入的了解。

实验开始时，我按照步骤在Linux环境下启动了Innovus工具，并加载了必要的脚本文件。导入网表和约束文件是整个流程的基础，这一步骤要求我们仔细检查文件路径和格式，确保无误。接着，通过自动放置功能，工具迅速生成了一个初步的布局方案。虽然自动布局大大节省了时间，但结果往往不够理想，需要我们进行手动优化。

在优化过程中，我深刻体会到了布局对电路性能的影响。例如，通过调整关键单元的位置，可以有效减少布线延迟，优化电路的时序性能。此外，电源规划也非常重要，良好的电源网络设计能够保证电路的稳定运行，减少功耗。

这次实验让我认识到，后端设计不仅仅是将逻辑电路转换为物理版图，更是一门兼顾艺术与技术的学问。它要求设计师在面积、功耗和性能之间找到最佳平衡点。虽然这次实验只是后端设计的冰山一角，但已经足够让我感受到其中的挑战与乐趣。

#title("实验六：数字后端设计验证分析")

= 实验目的

1. 完成DC综合实验
2. 完成FM等价性检查实验
3. 完成Innovus后端PR实验
4. 完成TEMPUS静态时序分析实验

= 实验内容

== Design Compiler (DC) 综合实验

1. 准备 RTL 代码：编写或获取待综合的数字电路的 Verilog 描述。
2. 设置综合环境：配置 Design Compiler 的工作环境，包括工艺库、约束文件等。
3. 运行综合命令：使用 Design Compiler 的命令行工具，输入综合命令及相关参数，启动综合过程。
4. 分析综合结果：查看综合生成的门级网表，分析综合报告，了解综合后的电路性能指标，如面积、延迟等。
== Formality (FM) 等价性检查实验

1. 准备输入文件：收集 RTL 代码、综合生成的门级网表以及相应的测试向量。
2. 设置检查环境：配置 Formality 的工作环境，指定输入文件和检查参数。
3. 执行等价性检查：运行 Formality 的检查命令，启动等价性验证过程。
4. 分析检查结果：查看 Formality 生成的报告，确认是否存在逻辑差异，对于发现的差异进行分析和调试。
== Innovus 后端 Place & Route (PR) 实验

1. 导入门级网表：将 Design Compiler 综合生成的门级网表导入 Innovus。
2. 设置物理设计环境：配置 Innovus 的工艺库、设计规则文件、约束文件等。
3. 执行布局操作：运行 Innovus 的布局命令，根据时序和面积约束进行芯片布局。
4. 进行布线操作：在布局完成后，执行布线命令，完成芯片内部的信号连接。
5. 优化设计：根据 Innovus 提供的分析报告，对设计进行时钟树插入、信号完整性优化等操作。
== Tempus 静态时序分析实验

1. 导入版图信息：将 Innovus 生成的物理版图信息导入 Tempus。
2. 设置分析环境：配置 Tempus 的工作环境，包括工艺库、时序约束文件、工作条件等。
3. 执行时序分析：运行 Tempus 的分析命令，对芯片设计进行全面的时序检查。
4. 分析时序报告：查看 Tempus 生成的时序报告，识别时序违例，分析时序裕度，对存在问题的路径进行优化。

= 心得体会


- 逻辑综合与优化

我学习了逻辑综合的概念，它将RTL代码转换为门级网表。我了解到综合工具提供了各种优化选项，例如面积优化、时序优化和功耗优化。不同的优化策略会对最终的电路性能产生不同的影响。例如，在追求高性能的应用中，时序优化可能比面积优化更重要；而在资源受限的场景中，则需要优先考虑面积优化。我体会到，在设计初期明确设计目标，并选择合适的优化策略至关重要。

- 等价性检查的重要性

等价性检查是验证设计正确性的关键步骤。通过形式验证工具，可以比较综合后的网表和原始RTL代码在逻辑功能上是否一致。这就像是程序代码的单元测试，确保每个模块的功能都符合预期。我认识到，即使是很小的逻辑错误，都可能导致芯片功能异常，甚至导致整个项目失败。因此，等价性检查是保障芯片设计质量的重要手段。

- 布局布线（Place & Route）的挑战

布局布线是后端设计中最复杂、最具挑战性的环节之一。它需要将逻辑单元放置在芯片上，并使用金属线将它们连接起来。这个过程需要综合考虑时序、面积、功耗、信号完整性以及可制造性等多种因素。我理解到，布局布线是一个迭代优化的过程，需要不断地调整和权衡各种参数，以达到最佳的设计结果。例如，缩短关键路径的长度可以提高时序性能，但可能会增加布线拥塞和功耗。

- 静态时序分析（STA）的必要性

静态时序分析是对设计进行全面时序验证的关键步骤。它通过分析电路中的所有路径，检查是否满足时序约束。我体会到，即使设计在功能上是正确的，如果时序不满足要求，芯片也无法正常工作。静态时序分析可以帮助工程师及早发现时序问题，并进行相应的优化。

#title("实验七：反相器的测试电路与仿真")

= 实验目的

1. 学习在Cadence Virtuoso环境下搭建反相器（INV）的测试电路图。Virtuoso是常用的集成电路设计软件，用于电路的版图设计、仿真和验证。
2. 理解反相器的工作原理，并通过仿真进行验证。反相器是一种基本的逻辑门电路，其输出电平与输入电平相反。
3. 掌握通过仿真工具对电路的功能进行验证，确保电路设计符合预期要求。仿真可以帮助我们在实际制造电路之前发现潜在的问题。

= 实验内容

1. 反相器INV电路的搭建
  - 使用Virtuoso设计工具，选择合适的元件（如晶体管、电阻、电容、电源等）并进行合理连接，搭建反相器电路。最常见的反相器是使用CMOS晶体管（互补金属氧化物半导体）搭建的CMOS反相器，它由一个PMOS管和一个NMOS管组成。
  - 确保电源和接地连接正确，保证电路稳定工作。正确的电源和接地连接是电路正常工作的基础。

2. 仿真验证
  - 在仿真环境中设置不同的输入信号（如方波、脉冲信号等），观察反相器的输出波形。通过改变输入信号的频率、幅度等参数，可以观察反相器的动态特性。
  - 验证反相器是否能够按照预期进行信号反转，并检查电路的时序是否正确。时序包括传播延迟时间（输入信号变化到输出信号变化的时间）、上升时间和下降时间等参数。

= 实验结果

#figure(
  image("assets/7/1.png", width: 70%),
  caption: [反相器测试电路图],
)
#figure(
  image("assets/7/2.png", width: 60%),
  caption: [反相器仿真波形图],
)

= 心得体会

在学习数字电路的理论知识时，我们了解了反相器是最基本的逻辑门之一，它的功能是将输入信号反相。但是，仅仅停留在理论层面是远远不够的。通过这次实验，我们亲手在Virtuoso环境下搭建了反相器电路，并进行了仿真验证。这个过程让我对反相器的工作原理有了更直观、更深入的理解。例如，通过观察仿真波形，我清楚地看到了输入信号和输出信号之间的反相关系，以及信号的延迟和上升/下降时间等动态特性。这比单纯地看书本上的公式和图示要生动得多。

#title("实验八：几种基础器件的电路与仿真")

= 实验目的

1. 学习如何在 Virtuoso 中搭建二输入的或非门(NOR2)、二输入与非门(NAND2)、传输门(TG)的电路图,并理解它们的逻辑功能。
2. 理解数字电路布局的基本原则,优化布局和连接,以减少延迟和功耗。

= 实验内容

1. 搭建二输入的或非门(NOR2)与二输入与非门(NAND2)、传输门(TG)电路图
  - 在 Virtuoso 中使用适当的元件(如晶体管、二极管等)搭建二输入的或非门
  - 分别设计每个逻辑门的电路图，确保输入输出符合逻辑功能。
2. 电路布局与放置图(Layout)设计
  - 设计上述逻辑门的布局放置图,优化器件的布局,减少连线长度和延迟,降低功耗。
  - 进行电路的版图设计,确保逻辑门电路的工作正常,符合设计规范。
3. 传输门(TG_test)的测试电路图设计
  - 使用 Virtuoso 设计传输门的测试电路图,验证传输门的功能。

= 实验结果

#figure(
  image("assets/8/nor2.png", width: 80%),
  caption: [或非门NOR2，schematic + layout],
)
#figure(
  image("assets/8/nand2.png", width: 80%),
  caption: [与非门NAND2，schematic + layout],
)
#figure(
  image("assets/8/tg.png", width: 80%),
  caption: [传输门 TG，schematic + layout],
)

= 心得体会

通过本次实验，我不仅掌握了如何在Virtuoso软件中搭建二输入或非门(NOR2)、二输入与非门(NAND2)以及传输门(TG)的基础逻辑电路图，还深入理解了这些逻辑门背后的运作机制。实验过程中，我特别注意到了不同逻辑门的真值表和它们在实际电路中的应用方式，这对我理解和设计更复杂的数字电路提供了坚实的基础。

实验让我深刻认识到数字电路布局的重要性。优化布局不仅是关于使电路图看起来整洁美观，更重要的是它直接关系到电路的性能表现。通过合理安排各个元件的位置，尽量缩短连接线长度，可以有效减少信号延迟和降低功耗，这对于提高电路效率至关重要。此外，良好的布局也有助于减少电磁干扰（EMI），确保电路稳定可靠地工作。

在实际操作中遇到的最大挑战是确保所设计的每个逻辑门电路图都能准确无误地实现其预期的逻辑功能。为了克服这一难题，我仔细查阅了相关资料，并多次调整电路参数和元件选择，直至达到满意的效果。

#title("实验九：D 触发器设计与实现")

D触发器是一种常用的时序逻辑电路，它具有数据存储和传输的功能。其工作原理是：当在时钟信号的上升沿（或下降沿，取决于具体电路设计）到来时，D输入端的数据会被锁存到输出端Q，并保持到下一个有效的时钟沿到来。这意味着D触发器可以有效地存储一位二进制数据。

= 实验目的

D触发器通常由主从触发器或传输门构成。在时钟信号的控制下，数据从输入端传输到输出端。在时钟信号有效期间，输入端的变化不会影响输出端的状态，从而实现了数据的稳定存储。

1. 学习如何在Virtuoso中使用反相器(INV)和传输门(TG)搭建D触发器的电路图。
2. 理解D触发器的基本功能和工作原理。
3. 学习如何设计D触发器的版图，优化电路布局，确保良好的电路性能。

= 实验内容

1. 搭建D触发器的电路图

  - 在Virtuoso中，使用反相器(INV)和传输门(TG)设计D触发器的电路图。
  - 利用反相器实现信号的反转，利用传输门控制数据在时钟信号的作用下正确传输和存储。

2. 设计D触发器的版图

  - 完成D触发器电路的布局放置图设计，并优化器件的摆放，确保信号传输路径尽可能短，降低电路延迟。
  - 在设计版图时，注意布线的紧凑性与合理性，减少布局时可能产生的干扰和功耗。

= 实验结果

#figure(
  image("assets/9/1.png", width: 80%),
  caption: [D触发器schematic],
)
#figure(
  image("assets/9/2.png", width: 80%),
  caption: [D触发器layout],
)

= 心得体会

通过本次实验，我深入了解了D触发器的工作原理、电路构成以及版图设计的重要性。本次实验不仅巩固了我在数字电路方面的理论知识，更重要的是提升了我的实践操作能力，让我对集成电路设计有了更直观的认识。

实验的第一部分是使用Virtuoso软件搭建D触发器的电路图。我们利用反相器（INV）和传输门（TG）构建了基本的D触发器电路。通过实际操作，我更加清晰地理解了反相器如何实现信号的反转，以及传输门如何在时钟信号的控制下实现数据的传输和存储。特别是传输门的使用，让我认识到它在控制信号通路方面的独特作用，它如同一个开关，只有在时钟信号有效时才允许数据通过。

实验的第二部分是设计D触发器的版图（Layout）。这部分实验让我体会到了版图设计在集成电路设计中的重要性。一个好的版图设计不仅能够提高电路的性能，还能增强电路的可靠性和可制造性。在设计过程中，我学习了如何合理地摆放器件，以尽量缩短信号传输路径，从而降低电路的延迟。同时，我也注意到了布线的紧凑性和合理性，避免了不必要的交叉和过长的连线，以减少信号干扰和电阻。此外，我还了解到版图设计中需要考虑寄生效应，这让我对实际电路中存在的各种复杂因素有了更深刻的认识。

#title("实验十：差分对电路设计与实现")


差分对电路是一种常用的模拟电路基本单元，它由两个参数对称的晶体管组成。其主要特点是可以有效地抑制共模信号，放大差模信号。当两个输入端输入相同的共模信号时，输出端的变化很小；而当输入端输入差模信号时，输出端的变化则会被放大。这一特性使得差分对电路在抗干扰、信号放大等方面具有重要的应用价值。

= 实验目的

1. 学习在 Virtuoso 中搭建差分对电路图的基本方法。
2. 理解差分对电路的工作原理及其在模拟电路中的应用。
3. 掌握如何设计差分对的 layout 放置图，优化布局以提高电路性能。

= 实验内容

1. 搭建差分对电路图

  - 在 Virtuoso 中设计差分对电路图，重点关注输入端和输出端口的合理配置，以确保差分对的平衡性和增益特性。
  - 通过选择合适的元件，设计差分信号的输入与输出，保证信号的完整性和放大效果。

2. 设计差分对的 layout 放置图

  - 完成差分对电路的 layout 放置图设计，并确保器件布局的对称性，以优化电路性能。


= 实验结果

#figure(
  image("assets/10/1.png", width: 60%),
  caption: [差分对电路 schematic],
)
#figure(
  image("assets/10/2.png", width: 50%),
  caption: [差分对电路 layout],
)

= 心得体会

首先，在电路图搭建阶段，我学习了如何在 Virtuoso 中创建差分对电路。重点在于如何合理配置输入端和输出端，以保证电路的平衡性和增益特性。通过选择合适的元件，例如匹配的晶体管和合适的负载电阻，我成功地搭建了能够有效放大差分信号的电路。在这个过程中，我意识到元件参数的选择对电路性能有着重要的影响，需要仔细考虑。

其次，版图设计是本次实验的重点和难点。为了优化电路性能，版图布局的对称性至关重要。我学习了如何通过合理的布局，例如对称放置晶体管和连接线，来减小失配和噪声的影响。此外，我还了解到版图设计还需要考虑其他因素，例如寄生电容和电阻、线宽和线距等，这些都会影响电路的实际性能。通过本次实验，我体会到版图设计不仅仅是将电路图“画”出来，更需要深入理解电路的工作原理，并将其转化为实际的物理布局。

此外，本次实验也让我意识到自己在模拟电路设计和版图设计方面还有很多不足之处，例如对一些高级的版图技巧还不够熟悉，对一些深层次的电路原理理解还不够透彻。在今后的学习中，我需要加强理论学习，多进行实践操作，不断提高自己的设计水平。

#title("实验十一：电流镜电路设计与实现")

本次实验旨在通过使用 Cadence Virtuoso平台，深入理解并实践电流镜电路的设计、仿真和版图实现。电流镜是模拟集成电路设计中一种重要的基本单元电路，广泛应用于偏置电路、有源负载、差分放大器等电路中。其核心功能是将一个电流复制到另一个电路分支，并保持电流的稳定性和精度。

= 实验目的

1. 掌握Virtuoso基本操作： 熟悉Cadence Virtuoso schematic editor和layout editor的基本操作，包括元件库调用、电路图绘制、版图布局布线等。
2. 理解电流镜原理： 重点理解工作原理，通过选择合适的元件构建稳定的电流源。设计过程中，注重输入与输出器件的对称性放置，以确保电流镜的精度与稳定性。
3. 设计电流镜的版图：完成版图设计，并优化器件的布局。确保器件的对称性，优化走线布局以降低电路的阻抗，从而提高电流镜的信号完整性和整体性能。

= 实验内容

1. 原理图设计：
  - 使用Virtuoso Schematic Editor绘制基本电流镜电路图。
  - 根据设计要求计算并选择合适的晶体管尺寸（W/L）。
  - 考虑温度、工艺偏差等因素对电流镜性能的影响，进行初步的电路参数调整。
2. 仿真验证：
  - 使用Spectre进行直流分析（DC Analysis），观察输入电流与输出电流的关系，验证电流镜像功能。
3. 版图设计：
  - 使用Virtuoso Layout Editor进行版图设计。
  - 采用共质心或交叉耦合等布局技术，提高器件匹配度。
  - 合理布线，减小寄生电阻和电容，提高电路性能。
  - 进行版图验证，包括DRC（Design Rule Check）、LVS（Layout Versus Schematic）等。

= 实验结果

#figure(
  image("assets/11/1.png", width: 60%),
  caption: [电流镜 schematic],
)
#figure(
  image("assets/11/2.png", width: 50%),
  caption: [电流镜 layout],
)

= 心得体会

通过本次“电流镜电路设计与实现”的实验，我受益匪浅。我不仅掌握了在Virtuoso环境下搭建和仿真电流镜电路的基本方法，更重要的是对电流镜的工作原理及其在模拟电路中的重要性有了更深入的理解。

在实验过程中，我体会到以下几点：

- 理论与实践相结合的重要性： 仅仅理解电流镜的理论知识是不够的，只有通过实际操作，才能真正理解其工作机制和设计要点。例如，在版图设计中，如果不注重器件的对称性布局和走线优化，就很难获得理想的电路性能。
- 细节决定成败： 电流镜的精度和稳定性受到诸多因素的影响，例如器件的匹配、版图的布局、寄生效应等。在设计过程中，必须注重每一个细节，才能最终获得高性能的电路。
- 仿真验证的重要性： 通过仿真，我们可以提前发现设计中的问题，并进行及时的调整和优化，避免了不必要的损失。仿真结果也为我们理解电路的工作原理提供了重要的参考。
